PROC B_DRESS DISPLON
;;**********程序功能**********
;;修整主程序
;;***************************
;修整参数赋值
IF GRIND[1]<>0;纯修整
    DRESSER[11]=DRESSER[25];粗修次数
    DRESSER[12]=DRESSER[26];精修次数
    DRESSER[14]=DRESSER[27];粗修进给
    DRESSER[15]=DRESSER[28];精修进给
    DRESSER[16]=DRESSER[29];粗修速度
    DRESSER[17]=DRESSER[30];精修速度
    WHEEL_LINESPEED_DRESS[0]=WHEEL_LINESPEED_DRESS[1];砂轮线速度
ELSE;磨削中修整
    DRESSER[11]=0
    DRESSER[12]=TECH_DRESS_TIME[5]
    DRESSER[14]=0
    DRESSER[15]=TECH_DRESS_DEEP[0]
    DRESSER[16]=0
    DRESSER[17]=TECH_DRESS_FEED[0]
    WHEEL_LINESPEED_DRESS[0]=WHEEL_LINESPEED_DRESS[2]
ENDIF

;报警及参数初始化
DRESSER[18]=0;当前次数清零
DRESSER[19]=0
DRESSER[20]=0
IF DRESSER[24]-(DRESSER[11]*DRESSER[14])*2-(DRESSER[12]*DRESSER[15])*2<DRESSER[35]
	DRESSER[6]=2;砂轮过小,请更换砂轮
ENDIF

;修整轮选择水平位置计算
;++++not-interpolation-delete-begain++++
DRESSER[33]=DRESSER[21]-WHILE[2]/2;左边水平基准零点
DRESSER[34]=DRESSER[21]+WHILE[2]/2;右边水平基准零点
;++++not-interpolation-delete-end++++
;垂直位置计算
WHILE[10]=DRESSER[2]-DRESSER[39]*DRESSER[24]/2;当前左端接触位置
WHILE[11]=WHILE[10]+WHILE[15];当前右端接触位置
C_LINESPEED_DRESS;砂轮速度
C_DRESS_INIT_POSITION;修整轮运行至起始位置
WHILE(DRESSER[18]+DRESSER[19]<=DRESSER[11]+DRESSER[12])
    STOPRE
    IF (DRESSER[18]+DRESSER[19]+DRESSER[20]<>0) AND ((DRESSER[18]+DRESSER[19]+DRESSER[20])/20-TRUNC((DRESSER[18]+DRESSER[19]+DRESSER[20])/20)==0)
        C_LINESPEED_DRESS;砂轮速度
        G4 F1.5;重新计算转速后的延时
    ENDIF
    D_GRINDWHEEL_DIACURNT;当前砂轮直径计算
    M28;修整冷却开
    C_DRESS_SHAPE;修整
    IF $A_DBB[2]==1;修整中途安全结束程序
        DRESSER[19]=DRESSER[19]+1
        GOTOF DRESS_ENDING
    ENDIF
    C_DRESS_CALC;次数累积
ENDWHILE
M29;修整冷却关
DRESS_ENDING:
C_DRESS_END_POSITION;修整轮运行至结束位置

D_ENDING:
F_DRESSWHEEL_STOP;修整轮停止

RET

